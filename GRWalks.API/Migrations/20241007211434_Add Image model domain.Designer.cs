// <auto-generated />
using System;
using GRWalks.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GRWalks.API.Migrations
{
    [DbContext(typeof(GRWalksDbContext))]
    [Migration("20241007211434_Add Image model domain")]
    partial class AddImagemodeldomain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GRWalks.API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6f659ed-e040-42a9-80ca-60318dc9682f"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("29584951-fab9-49b0-971b-5beb9dcb1fb2"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("cc3576f3-cc0b-4798-9075-39dd960b0e0b"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("GRWalks.API.Models.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("GRWalks.API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4083319c-5aa3-4527-850f-9d65b1c08ea8"),
                            Code = "CG",
                            Name = "Central Greece",
                            RegionImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Location_map_of_CentralGreece_%28Greece%29.svg/1200px-Location_map_of_CentralGreece_%28Greece%29.svg.png"
                        },
                        new
                        {
                            Id = new Guid("ebc8cfba-8311-47db-a979-0ff008a48e3f"),
                            Code = "PL",
                            Name = "Peleponnese",
                            RegionImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Location_map_of_Peloponnese_%28Greece%29.svg/1200px-Location_map_of_Peloponnese_%28Greece%29.svg.png"
                        },
                        new
                        {
                            Id = new Guid("56df7c1e-2f30-4de4-8996-972297a27d1d"),
                            Code = "TS",
                            Name = "Thessaly",
                            RegionImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Location_map_of_Thessaly_%28Greece%29.svg/800px-Location_map_of_Thessaly_%28Greece%29.svg.png"
                        },
                        new
                        {
                            Id = new Guid("fbe553ae-2d46-46c0-a950-c8655988c403"),
                            Code = "EP",
                            Name = "Epirus",
                            RegionImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQDvkxKw7Y3e2kIe6tSPqLaE5cQ2qATwcfpfg&s"
                        },
                        new
                        {
                            Id = new Guid("d4e17e88-7fcb-4001-8792-e1550bd67426"),
                            Code = "MD",
                            Name = "Macedonia",
                            RegionImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRLZ5Ewoc38qb7ABx-22X_oA56vormcLrezGw&s"
                        },
                        new
                        {
                            Id = new Guid("d9024e7f-1a6a-4c34-aa67-770b051e2b56"),
                            Code = "TH",
                            Name = "Thrace",
                            RegionImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Location_map_of_Thrace_%28Greece%29.svg/1200px-Location_map_of_Thrace_%28Greece%29.svg.png"
                        },
                        new
                        {
                            Id = new Guid("30041b4f-0368-4b58-b48f-2bf3f374da17"),
                            Code = "AI",
                            Name = "Aegean Islands",
                            RegionImageUrl = "https://mice.gr/wp-content/uploads/2017/01/aegean_islands.jpg"
                        },
                        new
                        {
                            Id = new Guid("9467927f-2dd2-401d-8489-9acec073d257"),
                            Code = "II",
                            Name = "Ionian Islands",
                            RegionImageUrl = "https://mice.gr/wp-content/uploads/2017/01/ionian.jpg"
                        });
                });

            modelBuilder.Entity("GRWalks.API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("GRWalks.API.Models.Domain.Walk", b =>
                {
                    b.HasOne("GRWalks.API.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GRWalks.API.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
